{"version":3,"sources":["Card.js","CardList31.js","robots.js","SearchBox31.js","Scroll31.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList31","robots","cardComponent","map","user","i","key","username","SearchBox31","searchfield","searchChange","type","placeholder","onChange","Scroll31","props","style","overflow","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","filteredRobots","this","filter","robot","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"0MAeeA,EAbE,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAC3B,OACE,yBAAKC,UAAU,oDACb,yBAAKC,IAAG,+BAA0BF,EAA1B,YAAwCG,IAAI,UACpD,6BACA,4BAAKL,GACL,2BAAIC,MCSCK,EAdI,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACZC,EAAgBD,EAAOE,KAAI,SAACC,EAAMC,GACpC,OACI,kBAAC,EAAD,CACIC,IAAKD,EACLT,GAAIK,EAAOI,GAAGT,GACdF,KAAMO,EAAOI,GAAGX,KAChBC,MAAOM,EAAOI,GAAGV,WAI3B,OAAO,6BAAMO,ICdND,EAAS,CACtB,CACIL,GAAI,EACJF,KAAM,kBACNa,SAAU,OACVZ,MAAO,qBAEX,CAAIC,GAAI,EACJF,KAAM,iBACNa,SAAU,YACVZ,MAAO,qBAEX,CAAIC,GAAI,EACJF,KAAM,qBACNa,SAAU,WACVZ,MAAO,sBAEX,CAAIC,GAAI,EACJF,KAAM,qBACNa,SAAU,WACVZ,MAAO,6BAEX,CAAIC,GAAI,EACJF,KAAM,qBACNa,SAAU,SACVZ,MAAO,4BAEX,CACIC,GAAI,EACJF,KAAM,yBACNa,SAAU,mBACVZ,MAAO,2BAEX,CAAIC,GAAI,EACJF,KAAM,oBACNa,SAAU,eACVZ,MAAO,0BAEX,CAAIC,GAAI,EACJF,KAAM,6BACNa,SAAU,gBACVZ,MAAO,wBAEX,CAAIC,GAAI,EACJF,KAAM,oBACNa,SAAU,WACVZ,MAAO,2BAEX,CAAIC,GAAI,GACJF,KAAM,uBACNa,SAAU,iBACVZ,MAAO,2BCrCIa,EAbK,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAChC,OACA,yBAAKb,UAAU,OACb,2BACEA,UAAU,mCACVc,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCIKI,EAVN,SAAAC,GACX,OACE,yBACCC,MAAO,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UAExDJ,EAAMK,WC0CRC,E,kDAzCX,aAAe,IAAD,gCACd,gBAaFC,eAAiB,SAAAC,GACf,EAAKC,SAAS,CAAEf,YAAac,EAAME,OAAOC,SAb1C,EAAKC,OAAL,GACA1B,OAAQ,IADR,uBAEQA,GAFR,4BAGa,IAHb,GAFc,E,gEAQG,IAAD,OAChB2B,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKR,SAAS,CAAEvB,OAAQ+B,S,+BAMnC,IAAD,OACCC,EAAiBC,KAAKP,MAAM1B,OAAOkC,QAAO,SAAAC,GAChD,OAAOA,EAAM1C,KACR2C,cACAC,SAAS,EAAKX,MAAMlB,YAAY4B,kBAGrC,OAAiC,IAA7BH,KAAKP,MAAM1B,OAAOsC,OACb,uCAIL,yBAAK1C,UAAU,MACb,oCACJ,kBAAC,EAAD,CAAaa,aAAcwB,KAAKZ,iBAChC,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAYrB,OAAQgC,IADpB,U,GAjCYO,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.23dfd268.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n    const Card = ({ name, email, id }) => {\r\n      return (\r\n        <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n          <img src={`https://robohash.org/${id}?200x200`} alt='robot' />\r\n          <div>\r\n          <h2>{name}</h2>\r\n          <p>{email}</p>\r\n          </div>\r\n        </div>\r\n        \r\n        );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList31 = ({ robots }) => {\r\n    const cardComponent = robots.map((user, i) => {\r\n        return (\r\n            <Card\r\n                key={i}\r\n                id={robots[i].id}\r\n                name={robots[i].name}\r\n                email={robots[i].email}\r\n         />\r\n    );\r\n    });\r\n      return <div>{cardComponent}</div>;\r\n};\r\n\r\nexport default CardList31;","export const robots = [\r\n{\r\n    id: 1,\r\n    name: 'Leanne Graham31',\r\n    username: 'Bret',\r\n    email: 'Sincere@april.biz'\r\n},\r\n{   id: 2,\r\n    name: 'Ervin Howell31',\r\n    username: 'Antonette',\r\n    email: 'Shanna@melissa.tv'  \r\n},  \r\n{   id: 3,    \r\n    name: 'Clementine Bauch31',\r\n    username: 'Samantha',\r\n    email: 'Nathan@yesenia.net'  \r\n},  \r\n{   id: 4,\r\n    name: 'Patricia Lebsack31',\r\n    username: 'Karianne',\r\n    email: 'Julianne.OConner@kory.org'  \r\n},  \r\n{   id: 5,\r\n    name: 'Chelsey Dietrich31',\r\n    username: 'Kamren',\r\n    email: 'Lucio_Hettinger@annie.ca'  \r\n},  \r\n{    \r\n    id: 6,\r\n    name: 'Mrs. Dennis Schulist31',\r\n    username: 'Leopoldo_Corkery',\r\n    email: 'Karley_Dach@jasper.info'  \r\n},  \r\n{   id: 7,\r\n    name: 'Kurtis Weissnat31',\r\n    username: 'Elwyn.Skiles',\r\n    email: 'Telly.Hoeger@billy.biz'\r\n},\r\n{   id: 8,\r\n    name: 'Nicholas Runolfsdottir V31',\r\n    username: 'Maxime_Nienow',\r\n    email: 'Sherwood@rosamond.me'\r\n},\r\n{   id: 9,\r\n    name: 'Glenna Reichert31',\r\n    username: 'Delphine',\r\n    email: 'Chaim_McDermott@dana.io'\r\n},\r\n{   id: 10,\r\n    name: 'Clementina DuBuque31',\r\n    username: 'Moriah.Stanton', \r\n    email: 'Rey.Padberg@karina.biz'  \r\n}];","import React from 'react';\r\nconst SearchBox31 = ({ searchfield, searchChange }) => {  \r\n    return (\r\n    <div className='pa2'>\r\n      <input\r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search'\r\n        placeholder='search robots'\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default SearchBox31;","import React from 'react';\r\n\r\nconst Scroll31 = props => {\r\n      return (\r\n        <div\r\n         style={{ overflow: 'scroll', border: '1px solid black', height: '800px' }}\r\n             >  \r\n                {props.children}  \r\n          </div> \r\n           );\r\n        };\r\n        \r\n        export default Scroll31;","import React,{Component} from 'react';\r\nimport CardList31 from '../CardList31';\r\nimport { robots } from '../robots';\r\nimport SearchBox31 from '../SearchBox31';\r\nimport Scroll31 from '../Scroll31';\r\n// import '';\r\n\r\nclass App extends Component   {\r\n    constructor() {\r\n    super();\r\n    this.state = {\r\n    robots: [],  \r\n    robots: robots,\r\n    searchfield: ''\r\n    };\r\n}\r\ncomponentDidMount() {\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response => response.json())\r\n      .then(users => this.setState({ robots: users }));  \r\n}\r\n\r\n  onSearchChange = event => {\r\n    this.setState({ searchfield: event.target.value });\r\n};  \r\nrender() {\r\n    const filteredRobots = this.state.robots.filter(robot => {\r\n    return robot.name  \r\n        .toLowerCase()\r\n        .includes(this.state.searchfield.toLowerCase());\r\n    });\r\n\r\n    if (this.state.robots.length === 0) {\r\n      return <h1>Loading</h1>;\r\n    } else {\r\n\r\n    return (\r\n        <div className='tc'>\r\n          <h1>DEMO</h1>\r\n      <SearchBox31 searchChange={this.onSearchChange} />\r\n      <Scroll31>\r\n      <CardList31 robots={filteredRobots} />;\r\n      </Scroll31>\r\n        </div> \r\n    );\r\n   }\r\n  }\r\n};\r\n\r\nexport default App; ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n//import Card from './Card';\n// import CardList31 from './CardList31';\n// import { robots } from './robots';\nReactDOM.render(<App />, document.getElementById('root'));\n  // <div>    \n  //   <Card id={robots[0].id} name={robots[0].name} email={robots[0].email} />\n  //   <Card id={robots[1].id} name={robots[1].name} email={robots[1].email} /> \n  //   <Card id={robots[2].id} name={robots[2].name} email={robots[2].email} />  \n  // </div>,\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}